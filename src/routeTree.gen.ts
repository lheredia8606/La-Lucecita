/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as WorkerWorkerPageImport } from './routes/_worker/workerPage'
import { Route as ClientClientPageImport } from './routes/_client/clientPage'
import { Route as AdminAdminPageImport } from './routes/_admin/adminPage'
import { Route as WorkerWorkerPageUnassignedOrdersImport } from './routes/_worker/workerPage/UnassignedOrders'
import { Route as WorkerWorkerPageMyOrdersImport } from './routes/_worker/workerPage/MyOrders'
import { Route as WorkerWorkerPageMyOrderHistoryImport } from './routes/_worker/workerPage/MyOrderHistory'
import { Route as ClientClientPageProductsImport } from './routes/_client/clientPage/products'
import { Route as ClientClientPageMyOrdersImport } from './routes/_client/clientPage/myOrders'
import { Route as ClientClientPageMyCartImport } from './routes/_client/clientPage/myCart'
import { Route as AdminAdminPageUnassignedOrdersImport } from './routes/_admin/adminPage/UnassignedOrders'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const WorkerWorkerPageRoute = WorkerWorkerPageImport.update({
  id: '/_worker/workerPage',
  path: '/workerPage',
  getParentRoute: () => rootRoute,
} as any)

const ClientClientPageRoute = ClientClientPageImport.update({
  id: '/_client/clientPage',
  path: '/clientPage',
  getParentRoute: () => rootRoute,
} as any)

const AdminAdminPageRoute = AdminAdminPageImport.update({
  id: '/_admin/adminPage',
  path: '/adminPage',
  getParentRoute: () => rootRoute,
} as any)

const WorkerWorkerPageUnassignedOrdersRoute =
  WorkerWorkerPageUnassignedOrdersImport.update({
    id: '/UnassignedOrders',
    path: '/UnassignedOrders',
    getParentRoute: () => WorkerWorkerPageRoute,
  } as any)

const WorkerWorkerPageMyOrdersRoute = WorkerWorkerPageMyOrdersImport.update({
  id: '/MyOrders',
  path: '/MyOrders',
  getParentRoute: () => WorkerWorkerPageRoute,
} as any)

const WorkerWorkerPageMyOrderHistoryRoute =
  WorkerWorkerPageMyOrderHistoryImport.update({
    id: '/MyOrderHistory',
    path: '/MyOrderHistory',
    getParentRoute: () => WorkerWorkerPageRoute,
  } as any)

const ClientClientPageProductsRoute = ClientClientPageProductsImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => ClientClientPageRoute,
} as any)

const ClientClientPageMyOrdersRoute = ClientClientPageMyOrdersImport.update({
  id: '/myOrders',
  path: '/myOrders',
  getParentRoute: () => ClientClientPageRoute,
} as any)

const ClientClientPageMyCartRoute = ClientClientPageMyCartImport.update({
  id: '/myCart',
  path: '/myCart',
  getParentRoute: () => ClientClientPageRoute,
} as any)

const AdminAdminPageUnassignedOrdersRoute =
  AdminAdminPageUnassignedOrdersImport.update({
    id: '/UnassignedOrders',
    path: '/UnassignedOrders',
    getParentRoute: () => AdminAdminPageRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/_admin/adminPage': {
      id: '/_admin/adminPage'
      path: '/adminPage'
      fullPath: '/adminPage'
      preLoaderRoute: typeof AdminAdminPageImport
      parentRoute: typeof rootRoute
    }
    '/_client/clientPage': {
      id: '/_client/clientPage'
      path: '/clientPage'
      fullPath: '/clientPage'
      preLoaderRoute: typeof ClientClientPageImport
      parentRoute: typeof rootRoute
    }
    '/_worker/workerPage': {
      id: '/_worker/workerPage'
      path: '/workerPage'
      fullPath: '/workerPage'
      preLoaderRoute: typeof WorkerWorkerPageImport
      parentRoute: typeof rootRoute
    }
    '/_admin/adminPage/UnassignedOrders': {
      id: '/_admin/adminPage/UnassignedOrders'
      path: '/UnassignedOrders'
      fullPath: '/adminPage/UnassignedOrders'
      preLoaderRoute: typeof AdminAdminPageUnassignedOrdersImport
      parentRoute: typeof AdminAdminPageImport
    }
    '/_client/clientPage/myCart': {
      id: '/_client/clientPage/myCart'
      path: '/myCart'
      fullPath: '/clientPage/myCart'
      preLoaderRoute: typeof ClientClientPageMyCartImport
      parentRoute: typeof ClientClientPageImport
    }
    '/_client/clientPage/myOrders': {
      id: '/_client/clientPage/myOrders'
      path: '/myOrders'
      fullPath: '/clientPage/myOrders'
      preLoaderRoute: typeof ClientClientPageMyOrdersImport
      parentRoute: typeof ClientClientPageImport
    }
    '/_client/clientPage/products': {
      id: '/_client/clientPage/products'
      path: '/products'
      fullPath: '/clientPage/products'
      preLoaderRoute: typeof ClientClientPageProductsImport
      parentRoute: typeof ClientClientPageImport
    }
    '/_worker/workerPage/MyOrderHistory': {
      id: '/_worker/workerPage/MyOrderHistory'
      path: '/MyOrderHistory'
      fullPath: '/workerPage/MyOrderHistory'
      preLoaderRoute: typeof WorkerWorkerPageMyOrderHistoryImport
      parentRoute: typeof WorkerWorkerPageImport
    }
    '/_worker/workerPage/MyOrders': {
      id: '/_worker/workerPage/MyOrders'
      path: '/MyOrders'
      fullPath: '/workerPage/MyOrders'
      preLoaderRoute: typeof WorkerWorkerPageMyOrdersImport
      parentRoute: typeof WorkerWorkerPageImport
    }
    '/_worker/workerPage/UnassignedOrders': {
      id: '/_worker/workerPage/UnassignedOrders'
      path: '/UnassignedOrders'
      fullPath: '/workerPage/UnassignedOrders'
      preLoaderRoute: typeof WorkerWorkerPageUnassignedOrdersImport
      parentRoute: typeof WorkerWorkerPageImport
    }
  }
}

// Create and export the route tree

interface AdminAdminPageRouteChildren {
  AdminAdminPageUnassignedOrdersRoute: typeof AdminAdminPageUnassignedOrdersRoute
}

const AdminAdminPageRouteChildren: AdminAdminPageRouteChildren = {
  AdminAdminPageUnassignedOrdersRoute: AdminAdminPageUnassignedOrdersRoute,
}

const AdminAdminPageRouteWithChildren = AdminAdminPageRoute._addFileChildren(
  AdminAdminPageRouteChildren,
)

interface ClientClientPageRouteChildren {
  ClientClientPageMyCartRoute: typeof ClientClientPageMyCartRoute
  ClientClientPageMyOrdersRoute: typeof ClientClientPageMyOrdersRoute
  ClientClientPageProductsRoute: typeof ClientClientPageProductsRoute
}

const ClientClientPageRouteChildren: ClientClientPageRouteChildren = {
  ClientClientPageMyCartRoute: ClientClientPageMyCartRoute,
  ClientClientPageMyOrdersRoute: ClientClientPageMyOrdersRoute,
  ClientClientPageProductsRoute: ClientClientPageProductsRoute,
}

const ClientClientPageRouteWithChildren =
  ClientClientPageRoute._addFileChildren(ClientClientPageRouteChildren)

interface WorkerWorkerPageRouteChildren {
  WorkerWorkerPageMyOrderHistoryRoute: typeof WorkerWorkerPageMyOrderHistoryRoute
  WorkerWorkerPageMyOrdersRoute: typeof WorkerWorkerPageMyOrdersRoute
  WorkerWorkerPageUnassignedOrdersRoute: typeof WorkerWorkerPageUnassignedOrdersRoute
}

const WorkerWorkerPageRouteChildren: WorkerWorkerPageRouteChildren = {
  WorkerWorkerPageMyOrderHistoryRoute: WorkerWorkerPageMyOrderHistoryRoute,
  WorkerWorkerPageMyOrdersRoute: WorkerWorkerPageMyOrdersRoute,
  WorkerWorkerPageUnassignedOrdersRoute: WorkerWorkerPageUnassignedOrdersRoute,
}

const WorkerWorkerPageRouteWithChildren =
  WorkerWorkerPageRoute._addFileChildren(WorkerWorkerPageRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/adminPage': typeof AdminAdminPageRouteWithChildren
  '/clientPage': typeof ClientClientPageRouteWithChildren
  '/workerPage': typeof WorkerWorkerPageRouteWithChildren
  '/adminPage/UnassignedOrders': typeof AdminAdminPageUnassignedOrdersRoute
  '/clientPage/myCart': typeof ClientClientPageMyCartRoute
  '/clientPage/myOrders': typeof ClientClientPageMyOrdersRoute
  '/clientPage/products': typeof ClientClientPageProductsRoute
  '/workerPage/MyOrderHistory': typeof WorkerWorkerPageMyOrderHistoryRoute
  '/workerPage/MyOrders': typeof WorkerWorkerPageMyOrdersRoute
  '/workerPage/UnassignedOrders': typeof WorkerWorkerPageUnassignedOrdersRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/adminPage': typeof AdminAdminPageRouteWithChildren
  '/clientPage': typeof ClientClientPageRouteWithChildren
  '/workerPage': typeof WorkerWorkerPageRouteWithChildren
  '/adminPage/UnassignedOrders': typeof AdminAdminPageUnassignedOrdersRoute
  '/clientPage/myCart': typeof ClientClientPageMyCartRoute
  '/clientPage/myOrders': typeof ClientClientPageMyOrdersRoute
  '/clientPage/products': typeof ClientClientPageProductsRoute
  '/workerPage/MyOrderHistory': typeof WorkerWorkerPageMyOrderHistoryRoute
  '/workerPage/MyOrders': typeof WorkerWorkerPageMyOrdersRoute
  '/workerPage/UnassignedOrders': typeof WorkerWorkerPageUnassignedOrdersRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/_admin/adminPage': typeof AdminAdminPageRouteWithChildren
  '/_client/clientPage': typeof ClientClientPageRouteWithChildren
  '/_worker/workerPage': typeof WorkerWorkerPageRouteWithChildren
  '/_admin/adminPage/UnassignedOrders': typeof AdminAdminPageUnassignedOrdersRoute
  '/_client/clientPage/myCart': typeof ClientClientPageMyCartRoute
  '/_client/clientPage/myOrders': typeof ClientClientPageMyOrdersRoute
  '/_client/clientPage/products': typeof ClientClientPageProductsRoute
  '/_worker/workerPage/MyOrderHistory': typeof WorkerWorkerPageMyOrderHistoryRoute
  '/_worker/workerPage/MyOrders': typeof WorkerWorkerPageMyOrdersRoute
  '/_worker/workerPage/UnassignedOrders': typeof WorkerWorkerPageUnassignedOrdersRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/login'
    | '/register'
    | '/adminPage'
    | '/clientPage'
    | '/workerPage'
    | '/adminPage/UnassignedOrders'
    | '/clientPage/myCart'
    | '/clientPage/myOrders'
    | '/clientPage/products'
    | '/workerPage/MyOrderHistory'
    | '/workerPage/MyOrders'
    | '/workerPage/UnassignedOrders'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/login'
    | '/register'
    | '/adminPage'
    | '/clientPage'
    | '/workerPage'
    | '/adminPage/UnassignedOrders'
    | '/clientPage/myCart'
    | '/clientPage/myOrders'
    | '/clientPage/products'
    | '/workerPage/MyOrderHistory'
    | '/workerPage/MyOrders'
    | '/workerPage/UnassignedOrders'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/login'
    | '/register'
    | '/_admin/adminPage'
    | '/_client/clientPage'
    | '/_worker/workerPage'
    | '/_admin/adminPage/UnassignedOrders'
    | '/_client/clientPage/myCart'
    | '/_client/clientPage/myOrders'
    | '/_client/clientPage/products'
    | '/_worker/workerPage/MyOrderHistory'
    | '/_worker/workerPage/MyOrders'
    | '/_worker/workerPage/UnassignedOrders'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  AdminAdminPageRoute: typeof AdminAdminPageRouteWithChildren
  ClientClientPageRoute: typeof ClientClientPageRouteWithChildren
  WorkerWorkerPageRoute: typeof WorkerWorkerPageRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  AdminAdminPageRoute: AdminAdminPageRouteWithChildren,
  ClientClientPageRoute: ClientClientPageRouteWithChildren,
  WorkerWorkerPageRoute: WorkerWorkerPageRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/login",
        "/register",
        "/_admin/adminPage",
        "/_client/clientPage",
        "/_worker/workerPage"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/_admin/adminPage": {
      "filePath": "_admin/adminPage.tsx",
      "children": [
        "/_admin/adminPage/UnassignedOrders"
      ]
    },
    "/_client/clientPage": {
      "filePath": "_client/clientPage.tsx",
      "children": [
        "/_client/clientPage/myCart",
        "/_client/clientPage/myOrders",
        "/_client/clientPage/products"
      ]
    },
    "/_worker/workerPage": {
      "filePath": "_worker/workerPage.tsx",
      "children": [
        "/_worker/workerPage/MyOrderHistory",
        "/_worker/workerPage/MyOrders",
        "/_worker/workerPage/UnassignedOrders"
      ]
    },
    "/_admin/adminPage/UnassignedOrders": {
      "filePath": "_admin/adminPage/UnassignedOrders.tsx",
      "parent": "/_admin/adminPage"
    },
    "/_client/clientPage/myCart": {
      "filePath": "_client/clientPage/myCart.tsx",
      "parent": "/_client/clientPage"
    },
    "/_client/clientPage/myOrders": {
      "filePath": "_client/clientPage/myOrders.tsx",
      "parent": "/_client/clientPage"
    },
    "/_client/clientPage/products": {
      "filePath": "_client/clientPage/products.tsx",
      "parent": "/_client/clientPage"
    },
    "/_worker/workerPage/MyOrderHistory": {
      "filePath": "_worker/workerPage/MyOrderHistory.tsx",
      "parent": "/_worker/workerPage"
    },
    "/_worker/workerPage/MyOrders": {
      "filePath": "_worker/workerPage/MyOrders.tsx",
      "parent": "/_worker/workerPage"
    },
    "/_worker/workerPage/UnassignedOrders": {
      "filePath": "_worker/workerPage/UnassignedOrders.tsx",
      "parent": "/_worker/workerPage"
    }
  }
}
ROUTE_MANIFEST_END */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as WorkerUserIndexImport } from './routes/workerUser/index'
import { Route as AdminUserIndexImport } from './routes/adminUser/index'
import { Route as ClientClientPageImport } from './routes/_client/clientPage'
import { Route as ClientClientPageProductsImport } from './routes/_client/clientPage/products'
import { Route as ClientClientPageMyOrdersImport } from './routes/_client/clientPage/myOrders'
import { Route as ClientClientPageMyCartImport } from './routes/_client/clientPage/myCart'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const WorkerUserIndexRoute = WorkerUserIndexImport.update({
  id: '/workerUser/',
  path: '/workerUser/',
  getParentRoute: () => rootRoute,
} as any)

const AdminUserIndexRoute = AdminUserIndexImport.update({
  id: '/adminUser/',
  path: '/adminUser/',
  getParentRoute: () => rootRoute,
} as any)

const ClientClientPageRoute = ClientClientPageImport.update({
  id: '/_client/clientPage',
  path: '/clientPage',
  getParentRoute: () => rootRoute,
} as any)

const ClientClientPageProductsRoute = ClientClientPageProductsImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => ClientClientPageRoute,
} as any)

const ClientClientPageMyOrdersRoute = ClientClientPageMyOrdersImport.update({
  id: '/myOrders',
  path: '/myOrders',
  getParentRoute: () => ClientClientPageRoute,
} as any)

const ClientClientPageMyCartRoute = ClientClientPageMyCartImport.update({
  id: '/myCart',
  path: '/myCart',
  getParentRoute: () => ClientClientPageRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/_client/clientPage': {
      id: '/_client/clientPage'
      path: '/clientPage'
      fullPath: '/clientPage'
      preLoaderRoute: typeof ClientClientPageImport
      parentRoute: typeof rootRoute
    }
    '/adminUser/': {
      id: '/adminUser/'
      path: '/adminUser'
      fullPath: '/adminUser'
      preLoaderRoute: typeof AdminUserIndexImport
      parentRoute: typeof rootRoute
    }
    '/workerUser/': {
      id: '/workerUser/'
      path: '/workerUser'
      fullPath: '/workerUser'
      preLoaderRoute: typeof WorkerUserIndexImport
      parentRoute: typeof rootRoute
    }
    '/_client/clientPage/myCart': {
      id: '/_client/clientPage/myCart'
      path: '/myCart'
      fullPath: '/clientPage/myCart'
      preLoaderRoute: typeof ClientClientPageMyCartImport
      parentRoute: typeof ClientClientPageImport
    }
    '/_client/clientPage/myOrders': {
      id: '/_client/clientPage/myOrders'
      path: '/myOrders'
      fullPath: '/clientPage/myOrders'
      preLoaderRoute: typeof ClientClientPageMyOrdersImport
      parentRoute: typeof ClientClientPageImport
    }
    '/_client/clientPage/products': {
      id: '/_client/clientPage/products'
      path: '/products'
      fullPath: '/clientPage/products'
      preLoaderRoute: typeof ClientClientPageProductsImport
      parentRoute: typeof ClientClientPageImport
    }
  }
}

// Create and export the route tree

interface ClientClientPageRouteChildren {
  ClientClientPageMyCartRoute: typeof ClientClientPageMyCartRoute
  ClientClientPageMyOrdersRoute: typeof ClientClientPageMyOrdersRoute
  ClientClientPageProductsRoute: typeof ClientClientPageProductsRoute
}

const ClientClientPageRouteChildren: ClientClientPageRouteChildren = {
  ClientClientPageMyCartRoute: ClientClientPageMyCartRoute,
  ClientClientPageMyOrdersRoute: ClientClientPageMyOrdersRoute,
  ClientClientPageProductsRoute: ClientClientPageProductsRoute,
}

const ClientClientPageRouteWithChildren =
  ClientClientPageRoute._addFileChildren(ClientClientPageRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/clientPage': typeof ClientClientPageRouteWithChildren
  '/adminUser': typeof AdminUserIndexRoute
  '/workerUser': typeof WorkerUserIndexRoute
  '/clientPage/myCart': typeof ClientClientPageMyCartRoute
  '/clientPage/myOrders': typeof ClientClientPageMyOrdersRoute
  '/clientPage/products': typeof ClientClientPageProductsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/clientPage': typeof ClientClientPageRouteWithChildren
  '/adminUser': typeof AdminUserIndexRoute
  '/workerUser': typeof WorkerUserIndexRoute
  '/clientPage/myCart': typeof ClientClientPageMyCartRoute
  '/clientPage/myOrders': typeof ClientClientPageMyOrdersRoute
  '/clientPage/products': typeof ClientClientPageProductsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/_client/clientPage': typeof ClientClientPageRouteWithChildren
  '/adminUser/': typeof AdminUserIndexRoute
  '/workerUser/': typeof WorkerUserIndexRoute
  '/_client/clientPage/myCart': typeof ClientClientPageMyCartRoute
  '/_client/clientPage/myOrders': typeof ClientClientPageMyOrdersRoute
  '/_client/clientPage/products': typeof ClientClientPageProductsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/login'
    | '/register'
    | '/clientPage'
    | '/adminUser'
    | '/workerUser'
    | '/clientPage/myCart'
    | '/clientPage/myOrders'
    | '/clientPage/products'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/login'
    | '/register'
    | '/clientPage'
    | '/adminUser'
    | '/workerUser'
    | '/clientPage/myCart'
    | '/clientPage/myOrders'
    | '/clientPage/products'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/login'
    | '/register'
    | '/_client/clientPage'
    | '/adminUser/'
    | '/workerUser/'
    | '/_client/clientPage/myCart'
    | '/_client/clientPage/myOrders'
    | '/_client/clientPage/products'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  ClientClientPageRoute: typeof ClientClientPageRouteWithChildren
  AdminUserIndexRoute: typeof AdminUserIndexRoute
  WorkerUserIndexRoute: typeof WorkerUserIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  ClientClientPageRoute: ClientClientPageRouteWithChildren,
  AdminUserIndexRoute: AdminUserIndexRoute,
  WorkerUserIndexRoute: WorkerUserIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/login",
        "/register",
        "/_client/clientPage",
        "/adminUser/",
        "/workerUser/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/_client/clientPage": {
      "filePath": "_client/clientPage.tsx",
      "children": [
        "/_client/clientPage/myCart",
        "/_client/clientPage/myOrders",
        "/_client/clientPage/products"
      ]
    },
    "/adminUser/": {
      "filePath": "adminUser/index.jsx"
    },
    "/workerUser/": {
      "filePath": "workerUser/index.jsx"
    },
    "/_client/clientPage/myCart": {
      "filePath": "_client/clientPage/myCart.tsx",
      "parent": "/_client/clientPage"
    },
    "/_client/clientPage/myOrders": {
      "filePath": "_client/clientPage/myOrders.tsx",
      "parent": "/_client/clientPage"
    },
    "/_client/clientPage/products": {
      "filePath": "_client/clientPage/products.tsx",
      "parent": "/_client/clientPage"
    }
  }
}
ROUTE_MANIFEST_END */

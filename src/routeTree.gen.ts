/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as WorkerUserIndexImport } from './routes/workerUser/index'
import { Route as ClientUserIndexImport } from './routes/clientUser/index'
import { Route as AdminUserIndexImport } from './routes/adminUser/index'
import { Route as ClientUserUserButtonContainerImport } from './routes/clientUser/UserButtonContainer'
import { Route as ClientUserOrdersIndexImport } from './routes/clientUser/orders/index'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const WorkerUserIndexRoute = WorkerUserIndexImport.update({
  id: '/workerUser/',
  path: '/workerUser/',
  getParentRoute: () => rootRoute,
} as any)

const ClientUserIndexRoute = ClientUserIndexImport.update({
  id: '/clientUser/',
  path: '/clientUser/',
  getParentRoute: () => rootRoute,
} as any)

const AdminUserIndexRoute = AdminUserIndexImport.update({
  id: '/adminUser/',
  path: '/adminUser/',
  getParentRoute: () => rootRoute,
} as any)

const ClientUserUserButtonContainerRoute =
  ClientUserUserButtonContainerImport.update({
    id: '/clientUser/UserButtonContainer',
    path: '/clientUser/UserButtonContainer',
    getParentRoute: () => rootRoute,
  } as any)

const ClientUserOrdersIndexRoute = ClientUserOrdersIndexImport.update({
  id: '/clientUser/orders/',
  path: '/clientUser/orders/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/clientUser/UserButtonContainer': {
      id: '/clientUser/UserButtonContainer'
      path: '/clientUser/UserButtonContainer'
      fullPath: '/clientUser/UserButtonContainer'
      preLoaderRoute: typeof ClientUserUserButtonContainerImport
      parentRoute: typeof rootRoute
    }
    '/adminUser/': {
      id: '/adminUser/'
      path: '/adminUser'
      fullPath: '/adminUser'
      preLoaderRoute: typeof AdminUserIndexImport
      parentRoute: typeof rootRoute
    }
    '/clientUser/': {
      id: '/clientUser/'
      path: '/clientUser'
      fullPath: '/clientUser'
      preLoaderRoute: typeof ClientUserIndexImport
      parentRoute: typeof rootRoute
    }
    '/workerUser/': {
      id: '/workerUser/'
      path: '/workerUser'
      fullPath: '/workerUser'
      preLoaderRoute: typeof WorkerUserIndexImport
      parentRoute: typeof rootRoute
    }
    '/clientUser/orders/': {
      id: '/clientUser/orders/'
      path: '/clientUser/orders'
      fullPath: '/clientUser/orders'
      preLoaderRoute: typeof ClientUserOrdersIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/clientUser/UserButtonContainer': typeof ClientUserUserButtonContainerRoute
  '/adminUser': typeof AdminUserIndexRoute
  '/clientUser': typeof ClientUserIndexRoute
  '/workerUser': typeof WorkerUserIndexRoute
  '/clientUser/orders': typeof ClientUserOrdersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/clientUser/UserButtonContainer': typeof ClientUserUserButtonContainerRoute
  '/adminUser': typeof AdminUserIndexRoute
  '/clientUser': typeof ClientUserIndexRoute
  '/workerUser': typeof WorkerUserIndexRoute
  '/clientUser/orders': typeof ClientUserOrdersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/clientUser/UserButtonContainer': typeof ClientUserUserButtonContainerRoute
  '/adminUser/': typeof AdminUserIndexRoute
  '/clientUser/': typeof ClientUserIndexRoute
  '/workerUser/': typeof WorkerUserIndexRoute
  '/clientUser/orders/': typeof ClientUserOrdersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/login'
    | '/register'
    | '/clientUser/UserButtonContainer'
    | '/adminUser'
    | '/clientUser'
    | '/workerUser'
    | '/clientUser/orders'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/login'
    | '/register'
    | '/clientUser/UserButtonContainer'
    | '/adminUser'
    | '/clientUser'
    | '/workerUser'
    | '/clientUser/orders'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/login'
    | '/register'
    | '/clientUser/UserButtonContainer'
    | '/adminUser/'
    | '/clientUser/'
    | '/workerUser/'
    | '/clientUser/orders/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  ClientUserUserButtonContainerRoute: typeof ClientUserUserButtonContainerRoute
  AdminUserIndexRoute: typeof AdminUserIndexRoute
  ClientUserIndexRoute: typeof ClientUserIndexRoute
  WorkerUserIndexRoute: typeof WorkerUserIndexRoute
  ClientUserOrdersIndexRoute: typeof ClientUserOrdersIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  ClientUserUserButtonContainerRoute: ClientUserUserButtonContainerRoute,
  AdminUserIndexRoute: AdminUserIndexRoute,
  ClientUserIndexRoute: ClientUserIndexRoute,
  WorkerUserIndexRoute: WorkerUserIndexRoute,
  ClientUserOrdersIndexRoute: ClientUserOrdersIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/login",
        "/register",
        "/clientUser/UserButtonContainer",
        "/adminUser/",
        "/clientUser/",
        "/workerUser/",
        "/clientUser/orders/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/clientUser/UserButtonContainer": {
      "filePath": "clientUser/UserButtonContainer.jsx"
    },
    "/adminUser/": {
      "filePath": "adminUser/index.jsx"
    },
    "/clientUser/": {
      "filePath": "clientUser/index.tsx"
    },
    "/workerUser/": {
      "filePath": "workerUser/index.jsx"
    },
    "/clientUser/orders/": {
      "filePath": "clientUser/orders/index.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
